#cloud-config

hostname: "WORKER_IP"
coreos:
  flannel:
    interface: WORKER_IP
  etcd2:
    discovery: https://discovery.etcd.io/DISCOVERY_ID
    advertise-client-urls: https://WORKER_IP:2379
    initial-advertise-peer-urls: https://WORKER_IP:2380
    listen-client-urls: http://127.0.0.1:2379,https://WORKER_IP:2379
    listen-peer-urls: https://WORKER_IP:2380
    cert-file: /etc/kubernetes/ssl/etcd-worker.pem
    key-file: /etc/kubernetes/ssl/etcd-worker-key.pem
    trusted-ca-file: /etc/kubernetes/ssl/etcd-ca.pem
    client-cert-auth: true
    peer-cert-file: /etc/kubernetes/ssl/etcd-worker.pem
    peer-key-file: /etc/kubernetes/ssl/etcd-worker-key.pem
    peer-trusted-ca-file: /etc/kubernetes/ssl/etcd-ca.pem
    peer-client-cert-auth: true
    proxy: on
  fleet:
    metadata: "role=node"
  units:
    - name: etcd2.service
      command: stop
    - name: fleet.service
      command: stop
    - name: iptables-restore.service
      command: stop
    - name: 00-enp0s3.network
      runtime: true
      content: |
        [Match]
        Name=ens32
        [Network]
        DNS=DNSSERVER
        Address=WORKER_IP
        Gateway=WORKER_GW
    - name: docker.service
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
      command: start
    - name: flanneld.service
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            After=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
      command: start
    - name: kubelet.service
      content: |
        [Unit]
        Requires=docker.service
        After=docker.service
        [Service]
        Environment=KUBELET_IMAGE_TAG=K8S_VER
        Environment="RKT_RUN_ARGS=--uuid-file-save=/var/run/kubelet-pod.uuid \
        --volume dns,kind=host,source=/etc/resolv.conf \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume var-log,kind=host,source=/var/log \
        --mount volume=var-log,target=/var/log \
        NETOVERLAY_MOUNTS
        --hosts-entry=host"
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
        NETOVERLAY_DIRS
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
        NETOVERLAY_CNICONF
        --container-runtime=docker \
        --network-plugin=cni \
        --register-node=true \
        --allow-privileged=true \
        --pod-manifest-path=/etc/kubernetes/manifests \
        --hostname-override=WORKER_IP \
        --cluster_dns=CLUSTER_DNS \
        --cluster_domain=cluster.local \
        --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
        --require-kubeconfig \
        --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
        --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem \
        --client-ca-file=/etc/kubernetes/ssl/ca.pem \
        --anonymous-auth=false \
        --cloud-provider=CLOUD_PROVIDER \
        --cloud-config=/etc/kubernetes/ssl/cloud.conf
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
      command: start
    - name: increase-nf_conntrack-connections.service
      command: start
      content: |
        [Unit]
        Description=Increase the number of connections in nf_conntrack.
        [Service]
        Type=oneshot
        ExecStartPre=/usr/sbin/modprobe nf_conntrack
        ExecStart=/bin/sh -c "sysctl -w net.netfilter.nf_conntrack_max=589824"
    - name: increase-nf_conntrack-hashsize.service
      command: start
      content: |
        [Unit]
        Description=Increase the nf_conntrack hashsize.
        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c "echo 147456 > /sys/module/nf_conntrack/parameters/hashsize"
    - name: increase-port_range.service
      command: start
      content: |
        [Unit]
        Description=Increase port_range.
        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c "echo 1024 65535 > /proc/sys/net/ipv4/ip_local_port_range"
    - name: increase-net.core.somaxconn.service
      command: start
      content: |
        [Unit]
        Description=Increase net.core.somaxconn.
        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c "sysctl -w net.core.somaxconn=256"
    - name: change-conntrack_timeout.service
      command: start
      content: |
        [Unit]
        Description=change conntrack tcp timeout.
        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c "sysctl -w net.netfilter.nf_conntrack_tcp_timeout_time_wait=1"
    - name: change-tcp_timeout_estab.service
      command: start
      content: |
        [Unit]
        Description=change tcp timeout estab.
        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c "sysctl -w net.netfilter.nf_conntrack_tcp_timeout_established=600"
    - name: settimezone.service
      command: start
      content: |
        [Unit]
        Description=Set the time zone
        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone Europe/Amsterdam
        RemainAfterExit=yes
        Type=oneshot
    - name: systemd-timesyncd.service
      command: stop
      mask: true
    - name: ntpd.service
      command: start
      enable: true
    - name: systemd-modules-load.service
      command: restart
    - name: systemd-sysctl.service
      command: restart
  update:
    reboot-strategy: "etcd-lock"
  locksmith:
    window-start: Thu 04:00
    window-length: 1h
users:
  - name: "core"
    passwd: "USER_CORE_PASSWORD"
    groups:
      - "sudo"
      - "docker"
    ssh_authorized_keys:
      - USER_CORE_SSHKEY1
      - USER_CORE_SSHKEY2
write_files:
  - path: "/home/core/.bashrc"
    permissions: "0644"
    owner: "core"
    content: |
      if [[ $- != *i* ]] ; then
        return
      fi
      export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/bin:$PWD
  - path: "/root/.bashrc"
    permissions: "0644"
    owner: "core"
    content: |
      if [[ $- != *i* ]] ; then
        return
      fi
      export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/bin:$PWD:/home/core
  - path: "/var/lib/iptables/rules-save"
    permissions: "0644"
    owner: "root"
    content: |
      *filter
      :INPUT DROP [0:0]
      :FORWARD DROP [0:0]
      :OUTPUT ACCEPT [0:0]
      -A INPUT -i lo -j ACCEPT
      -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 2379 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 2380 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 10250 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 10255 -j ACCEPT
      -A INPUT -p tcp --match multiport --dports 30000:32767 -j ACCEPT
      -A INPUT -p udp -m udp --dport 8285 -j ACCEPT
      -A INPUT -p udp -m udp --dport 8472 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 3 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT
      COMMIT
  - path: "/etc/resolv.conf"
    permissions: "0644"
    owner: "root"
    content: |
      nameserver DNSSERVER
  - path: "/etc/kubernetes/cni/docker_opts_cni.env"
    permissions: "0644"
    owner: "root"
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""
  - path: "/etc/kubernetes/cni/net.d/10-flannel.conf"
    permissions: "0644"
    owner: "root"
    content: |
      {
        "name": "podnet",
        "type": "flannel",
        "delegate": {
          "isDefaultGateway": true
        }
      }
  - path: "/etc/flannel/options.env"
    permissions: "0644"
    owner: "root"
    content: |
      FLANNELD_IFACE=WORKER_IP
      FLANNELD_ETCD_ENDPOINTS=ETCD_ENDPOINTS_URLS
      FLANNELD_ETCD_KEYFILE=/etc/ssl/certs/etcd-worker-key.pem
      FLANNELD_ETCD_CERTFILE=/etc/ssl/certs/etcd-worker.pem
      FLANNELD_ETCD_CAFILE=/etc/ssl/certs/etcd-ca.pem
      FLANNEL_IMAGE_TAG=FLANNEL_VER
  - path: "/etc/kubernetes/manifests/kube-proxy.yaml"
    permissions: "0644"
    owner: "root"
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: quay.io/coreos/hyperkube:K8S_VER
          command:
          - /hyperkube
          - proxy
          - --master=https://MASTER_HOST_IP
          - --cluster-cidr=10.244.0.0/16
          - --conntrack-max-per-core=0
          - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /etc/ssl/certs
            name: "ssl-certs"
          - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
            name: "kubeconfig"
            readOnly: true
          - mountPath: /etc/kubernetes/ssl
            name: "etc-kube-ssl"
            readOnly: true
        volumes:
        - name: "ssl-certs"
          hostPath:
            path: "/usr/share/ca-certificates"
        - name: "kubeconfig"
          hostPath:
            path: "/etc/kubernetes/worker-kubeconfig.yaml"
        - name: "etc-kube-ssl"
          hostPath:
            path: "/etc/kubernetes/ssl"
  - path: "/etc/kubernetes/worker-kubeconfig.yaml"
    permissions: "0644"
    owner: "root"
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - name: local
        cluster:
          server: https://MASTER_HOST_IP
          certificate-authority: /etc/kubernetes/ssl/ca.pem
      users:
      - name: kubelet
        user:
          client-certificate: /etc/kubernetes/ssl/worker.pem
          client-key: /etc/kubernetes/ssl/worker-key.pem
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: kubelet-context
      current-context: kubelet-context
  - path: "/etc/kubernetes/ssl/ca.pem"
    permissions: "0664"
    encoding: "gzip+base64"
    owner: "root"
    content: |
      CACERT
  - path: "/etc/kubernetes/ssl/worker-key.pem"
    permissions: "0600"
    encoding: "gzip+base64"
    owner: "root"
    content: |
      WORKERKEY
  - path: "/etc/kubernetes/ssl/worker.pem"
    permissions: "0664"
    encoding: "gzip+base64"
    owner: "root"
    content: |
      WORKER
  - path: "/etc/kubernetes/ssl/etcd-ca.pem"
    permissions: "0664"
    encoding: "gzip+base64"
    owner: "root"
    content: |
      ETCDCACERT
  - path: "/etc/kubernetes/ssl/etcd-worker-key.pem"
    permissions: "0644"
    encoding: "gzip+base64"
    owner: "root"
    content: |
      ETCDWORKERKEY
  - path: "/etc/kubernetes/ssl/etcd-worker.pem"
    permissions: "0664"
    encoding: "gzip+base64"
    owner: "root"
    content: |
      ETCDWORKER
  - path: "/etc/ssl/certs/etcd-ca.pem"
    permissions: "0664"
    encoding: "gzip+base64"
    owner: "root"
    content: |
      ETCDCACERT
  - path: "/etc/ssl/certs/etcd-worker-key.pem"
    permissions: "0644"
    encoding: "gzip+base64"
    owner: "root"
    content: |
      ETCDWORKERKEY
  - path: "/etc/ssl/certs/etcd-worker.pem"
    permissions: "0664"
    encoding: "gzip+base64"
    owner: "root"
    content: |
      ETCDWORKER
  - path: "/etc/kubernetes/ssl/cloud.conf"
    permissions: "0664"
    encoding: "gzip+base64"
    owner: "root"
    content: |
      CLOUDCONF
  - path: /etc/motd.d/k8s.conf
    owner: "root"
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      H4sIAJ7IHVkAA3WTO7rEIAiF+6zCng/oWQ07oKDK7u9Bx6iTuTTx8R8CAq19mzOLv05h1/eBsEbed2YYvxQ77WKUIKdBoafi+kkSP8tSyEmfPu/b2rGFwhfN5xWRNKU4BLHo6HuxvJPY3aUiw0ejDqzjPGn++DRBTkAyERt+YRAIUy7n13RdvDTQuC261BUszVhk0DL33CRUqjaIxGoR2nz6okFPdfZlasVWz8zRPdrm/Go+c0dkpFaP61EalECJ16+1aO1+FVzVXZitQCwhrG5xg6gzDjo/dCDIHhUViXSrWyqVoEEjr6utIt/qbhFeR+R4RFRJZpJ4+fLdXB8+qjYgqp/wBzz+djVruRygov5YW2yORhld5TbPzQl1gWUmP15Czo6VkUjyUzts7HNo72ngo+c2Da2B2GZny3Zje3a/Jg0z+TLZ799T/K9df0AUN+scBAAA
  - path: /etc/ntp.conf
    content: |
      server 0.europe.pool.ntp.org
      server 1.europe.pool.ntp.org
      server 2.europe.pool.ntp.org
      # - Allow only time queries, at a limited rate.
      # - Allow all local queries (IPv4, IPv6)
      restrict default nomodify nopeer noquery limited kod
      restrict 127.0.0.1
      restrict [::1]
